1.新建用户
adduser testuser //新建testuser 用户
passwd testuser //给testuser 用户设置密码
2.建工作组
groupadd testgroup //新建test工作组

3.新建用户同时增加工作组
useradd -g testgroup testuser //新建testuser用户并增加到testgroup工作组
//注：：-g 所属组 -d 家目录 -s 所用的SHELL

4.给已有的用户增加工作组
usermod -G groupname username

5.临时关闭
在/etc/shadow文件中属于该用户的行的第二个字段（密码）前面加上就可以了。想恢复该用户，去掉即可
//或者使用如下命令关闭用户账号：
passwd testuser –l
//重新释放：
passwd testuser –u

6.永久性删除用户账号
userdel testuser
groupdel testgroup
usermod –G testgroup testuser //（强制删除该用户的主目录和主目录下的所有文件和子目录）

7.显示用户信息
id user
cat /etc/passwd

补充:查看用户和用户组的方法
用户列表文件：/etc/passwd
用户组列表文件：/etc/group
查看系统中有哪些用户：cut -d : -f 1 /etc/passwd
查看可以登录系统的用户：cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1
查看用户操作：w命令(需要root权限)
查看某一用户：w 用户名
查看登录用户：who
查看用户登录历史记录：last



如何查找异常用户
ll /var/security/log	#安全日志
vim /etc/hosts.deny   ALL: 188.xxx.xxx.xxx	#黑名单
cat /etc/passwd   或者 

useradd xxx  #加用户
echo 123456 | passwd --stdin xxx  #给xxx用户加密码

提权
cat /etc/passwd
grep bash /etc/passwd  #过滤出来可登录用户

隐藏两种层次：
	一、隐藏 用户 
		usseradd -d  /bin/email email
		grep bash /etc/passwd  仍然可以被过滤到
	二、隐藏bash   ()
		ls /bin/bash
		cp /bin/bash /sbin/nologin  //考别一下
		vim /sbin/nologin
		email --->/sbin/nologin
		
查找正常用户
	一、对比文件	
		dff /etc/passwd  /opt/passwd
		vimdiff /xxx  /xxx
	二、对比密码
	cat /etc/shadow  (密码存储位置文件)
		
劫持root用户密码

两个软件
	openssh
	openpatch
		cp /ss/sshbd5  /opensshd/sshbd5 #替换掉正常的软件
	功能：
		1、记录root密码（铭文）
		2、在sshd中添加一个后门密码
用root用户登录以后，可在/tmp/ilog中查看
	cat /tmp/ilog
	cat /tmp/olog  #用于及记录用户登录记录

nmtui #可以打开图形网络配置的命令

/etc/sysconfig/network-scripts/ifcfg-ens33  #网卡配置文件   
/etc/hostname  #主机名文件
service network restart 或者 systemctl restart network  #重启网卡
systemctl status/stop/start firewalld.service  #查看、关闭、开启防火墙
systemctl enable/disable firewalld.service  #防火墙开机启动、不启动
chkconfig --list | grep network  #查看开机是否启动 rhle6 

Selunix 
	getforce #可用于操作Selinux开启和关闭的命令 
	//临时操作
	setenforce 0 #关闭Selunix
	setenforce 1 #开启Selunix
	//永久关闭
	vim /ect/selinux/config
	将 SELUNIX 设置为 =disable

//设置开机挂载盘
	vim /etc/fstab  #用于编辑开机挂载的方式，加入以下挂载格式，可以进行开机挂载
	/dev/sr0 		/mnt	iso9960		defaults	   0	 0  #挂载的格式
	或者 
	echo "/dev/cdrom 		/mnt	iso9960		defaults	   0	 0 " >> /etc/fstab  #cdrom 和sr0 是指向同一个文件

	mount /dev/sr0 /mnt/ssss  #将sr0设备挂载到 /mnt/ssss下
	mount -a

配置本地yum源
	cd /etc/yum.respos.d/  #进入到原配置文件中心
	rm -f ./*  #清除所有的repo文件
	vim centos.repo  #新建一个配置文件，加入以下格式内容，可以对源进行修改
	repo文件格式
		[CentOS7]   --》yum源的ID，必须唯一
		name=CentOS-server  --》描述信息
		baseurl=file:///mnt  --》挂载点
		enable=1  --》启用
		gpgcheck=0 --》取消验证
	yum clean all  清空缓存
	
	tty   //查看终端信息
	echo msg > /dev/pts/1  //终端通信格式：
	shutdown -h 
	shutdown +10  //过10分钟后关机  系统广播
	shutdown -c   //取消关机
	wall 'msg'   //广播给所有终端

内部命令：在系统启动的时候就调入内存的，是常驻的，执行效率高
外部命令：系统软件功能，用户需要时才从硬盘中读入内存。

区分：
	使用type命令，语法： type + 命令

【用户名@主机名：当前目录】#/$ 命令区

# root  
$ 普通用户

head -1 /

蓝色  目录 
黑色   文件
浅蓝色  连接
红色   压缩包
绿色   	可执行文件
黑底黄色 设备文件

。开头的 隐藏文件

.bashrc 中给命令取别名 alias

ls -a   查看所有
ls -d  只看目录
ls -S  按照大小排序

ls -l  和  ll  都一样

临时取别名命令：alias  vimEns33=“vim /etc/../xxxx”

cd //切换目录

	cd/cd ~  #回到家目录
	cd .. #回到父目录
	cd /   #到根目录
	cd - #回到上一级

history 
	方法1、光标上下键
	方法2、ctrl + r 
	方法3、！168  //执行第168条命令
	方法4、！字符串  //搜索历史最近一个以键入的字符创开头的命令，如：！systemctrl


Ctrl+d 《=》 exit
Ctrl+c 《=》 取消正在执行的命令或者程序
Ctrl+l 《=》 清屏与clear一样
Ctrl+A 《=》 调到命令头
Ctrl+E 《=》 调到命令尾
Ctrl+U 《=》 调到命令头删除
Ctrl+K 《=》 调到命令尾进行删除
Ctrl+R 《=》 搜搜历史名利

!$   取用上一个命令的参数

时间：系统时间和硬件时间
	hwclock:  //查看硬件时间
	date：		//查看系统时间
	date -s "2018-11-2  22:30"  //设置时间
	date "+%F" 
	time  //测试命令用时
	man / --help
	
shutdown 
	-r =>重启 
	-h =>关机 
	-h 时间 => 定时关机 
	-c => 取消关机
	
启动级别：0-6
	0 ：
	1 ：
	2 ：
	3 ：
	4 ：
	5 ：
	6 ：
		
systemctl set-default multi-user.target  #设置默认启动级别为3
systemctl set-default graphical.target   #设置默认启动级别为5
runlevel 查看当前启动级别

服务来电后自动开机
BIOS -》Interated Peripharals -》SuperIO Divice RestoreOn Ac Power Loss【Power On】

定时关机：
Power Manager 
wakeup 



Linux 系统文件结构

/ :根分区
swap：交换分区，扩充内存
/bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。
/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。
/dev ：dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。
/etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。
/home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。
/lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。
/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。
/media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。
/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。
/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。
/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all
/root：该目录为系统管理员，也称作超级权限者的用户主目录。
/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。
/selinux：这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。
/srv：该目录存放一些服务启动之后需要提取的数据。
/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统种被创建。
/tmp：这个目录是用来存放一些临时文件的。
/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。
/usr/bin：系统用户使用的应用程序。
/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。
/usr/src：内核源代码默认的放置目录。
/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。

在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。
/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。
/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。
值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。
/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。

Linux 中文玩
vmstat
	结果：
		pros----memory---swap---io---system---cpu---
			procs：进程
				r 表示运行队列
				b 表示阻塞进程数
			memory：内存
				swpd 虚拟机内存已用大小，大于0、表示物理机内存不足
				free 空闲的内存大小
				buff 用来存储目录里边的内容权限等缓存
				cache 直接用来记忆我们打开过的文件，给文件做缓冲
			swap 交换分区
				si 每秒从磁盘读入虚拟机的内存大小
				so 每秒虚拟机写入磁盘的大小
			io：块设备
				bi 
				bo
			system：
				in 
				cs 
			cpu：中央处理器
				us 
				sy 
				id 
				
w：
	作用：what的简写
	结果：
		
	说明：
	
top：

	使用：
	
	说民：
		第一行：功能同w
		第二行：任务信息
		第三行：cpu信息
		第四行：内存信息
		第五行：交换分区
		其他行：
			PID：进程号
			USER：用户
			PR：优先级
			NI：NICE
			VIRT：虚拟内存总容量
			RES：虚拟内存中，未被交换的物理内存
			SHR：共享内存大小
			S：进程状态
			%CPU：CPU占用百分比
			%MEM：内存占用百分比
			TIME：CPU使用时间
			COMMAND：进程名/命令

源码编译三板斧：
	一、./configure --prefix=/usr/../xxx   #安装路径等配置
	二、make -j 4  #编译
	三、make install #安装

Linux CentoS docker mysql 安装和使用

1. 安装Docker
[root@test2 ~]# yum install -y docker		#通过yum方式安装Dokcer。（ 注：-y表示不再询问，使用默认配置进行安装）
[root@test2 ~]# yum list installed | grep docker		#查看是否安装成功 通过yum安装完成列表并筛选docker安装信息如下所示：
docker.x86_64                        2:1.13.1-96.gitb2f74b2.el7.centos @extras  
docker-client.x86_64                 2:1.13.1-96.gitb2f74b2.el7.centos @extras  
docker-common.x86_64                 2:1.13.1-96.gitb2f74b2.el7.centos @extras
​

2. 启动Docker服务
[root@test2 ~]# systemctl start docker		# 启用Docker服务
[root@test2 ~]# systemctl status docker		# 查看Docker状态
● docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)
   Active: active (running) since 日 2019-06-30 13:28:20 CST; 9s ago
     Docs: http://docs.docker.com
 Main PID: 40684 (dockerd-current)
   CGroup: /system.slice/docker.service
           ├─40684 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-cur...
           └─40695 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-cont...
6月 30 13:28:18 test2 dockerd-current[40684]: time="2019-06-30T13:28:18.507160774+08:00" level=info ...695"
6月 30 13:28:19 test2 dockerd-current[40684]: time="2019-06-30T13:28:19.765323180+08:00" level=info ...nds"
6月 30 13:28:19 test2 dockerd-current[40684]: time="2019-06-30T13:28:19.767794756+08:00" level=info ...rt."
6月 30 13:28:19 test2 dockerd-current[40684]: time="2019-06-30T13:28:19.997012431+08:00" level=info ...lse"
6月 30 13:28:20 test2 dockerd-current[40684]: time="2019-06-30T13:28:20.245956439+08:00" level=info ...ess"
6月 30 13:28:20 test2 dockerd-current[40684]: time="2019-06-30T13:28:20.458345533+08:00" level=info ...ne."
6月 30 13:28:20 test2 dockerd-current[40684]: time="2019-06-30T13:28:20.490475169+08:00" level=info ...ion"
6月 30 13:28:20 test2 dockerd-current[40684]: time="2019-06-30T13:28:20.490503694+08:00" level=info ...13.1
6月 30 13:28:20 test2 systemd[1]: Started Docker Application Container Engine.
6月 30 13:28:20 test2 dockerd-current[40684]: time="2019-06-30T13:28:20.506191917+08:00" level=info ...ock"
Hint: Some lines were ellipsized, use -l to show in full.

[root@test2 ~]# docker images		# 使用Docker命令（注：裸机状态下Docker镜像列表为空。）
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
​ 

3. 使用Docker安装MySQL

[root@test2 ~]# docker pull mysql:8.0		# 使用Docker pull拉取Docker hub仓库中的MySQL镜像（注：docker pull 默认到官方参考拉取 mysql：8.0 镜像名：镜像tag，官方地址为国外地址，下载速度缓慢可进行配置。）
Trying to pull repository docker.io/library/mysql ... 
8.0: Pulling from docker.io/library/mysql
fc7181108d40: Pull complete 
787a24c80112: Pull complete 
a08cb039d3cd: Pull complete 
4f7d35eb5394: Pull complete 
5aa21f895d95: Pull complete 
a742e211b7a2: Pull complete 
0163805ad937: Pull complete 
87f18876c3ff: Pull complete 
78082f25f167: Pull complete 
0a510f055c17: Pull complete 
312b0999e433: Pull complete 
f864cfdc0264: Pull complete 
Digest: sha256:415ac63da0ae6725d5aefc9669a1c02f39a00c574fdbc478dfd08db1e97c8f1b
Status: Downloaded newer image for docker.io/mysql:8.0
​出现上述信息，则拉去成功。
[root@test2 ~]# vi /etc/docker/daemon.json		#修改镜像文件拉取地址为ustc，即为以下内容：
	{
		"registry-mirrors":["https://docker.mirrors.ustc.edu.cn"]
	}
​修改完毕后重启Docker服务。
[root@test2 ~]# systemctl restart docker	#重启Docker服务
[root@test2 ~]# systemctl daemon-reload		#同上
[root@test2 ~]# chkconfig docker on			#设置开机自启动
[root@test2 ~]# systemctl enable/disable docker		#设置开机自启动/停止
[root@test2 ~]# docker images  	# 查看DOcker内的镜像文件确保MySQL 8.0已成功拉取
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
docker.io/mysql     8.0                 c7109f74d339        2 weeks ago         443 MB
为了安全性，我们应该将数据和配置放到宿主机中，首先执行下面的命令创建data目录、config目录和logs目录，创建目录后面存mysql相关内容：/opt/mysql/data    /opt/mysql/logs    /opt/mysql/conf
data目录将映射为mysql容器配置的数据文件存放路径
logs目录将映射为mysql容器的日志目录
conf目录里的配置文件将映射为mysql容器的配置文件，在conf目录下创建my.cnf文件
vim /opt/mysql/conf/my.cnf #创建并编辑配置文件，加入以下内容
[mysqld]
pid-file=/var/run/mysqld/mysqld.pid
socket=/var/run/mysqld/mysqld.sock
datadir=/var/lib/mysql
secure-file-priv= NULL
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
default_authentication_plugin= mysql_native_password

4. 运行容器（先进入到/opt/mysql目录下）

docker run \
-p 3306:3306 \  #将容器的 3306 端口映射到主机的 3306 端口
--name mysql8 \  	#容器名称
--restart=always \ #容器自己启动
-v /opt/mysql/conf:/etc/mysql/conf.d \
-v /opt/mysql/logs:/var/log/mysql \  #将主机当前目录下的 logs 目录挂载到容器的 /logs。
-v /opt/mysql/data:/var/lib/mysql	#将主机当前目录下的data目录挂载到容器的 /var/lib/mysql
-e MYSQL_ROOT_PASSWORD=meiyou \  #root用户密码设置
-d \  #后台运行
mysql #目标镜像


有时候会出现Container启动不起来，可以看日志：（发现是权限问题）
docker logs -t --since 10m mysql8.0 
可以加 --privileged=true

[root@test2 ~]# docker ps -a	#查看运行的镜像
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
1c52224315bf        mysql:8            "docker-entrypoint..."   56 seconds ago      Up 55 seconds       33060/tcp, 0.0.0.0:3307->3306/tcp   mysql8

5. 进入镜像运行MySQL
[root@test2 ~]# docker exec -it mysql8 /bin/bash #进入MySQL容器（注：exec docker：进入容器命令 -it：容器中服务别名 /bin/bash：表示命令行模式与-d后台守护进行模式启动形成两种运行方式）
[root@test2 ~]# root@1c52224315bf:/# cd /usr/bin	#进入方式
[root@test2 ~]# root@1c52224315bf:/usr/bin# mysql -u root -p		# 进入MySQL
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 9
Server version: 8.0.16 MySQL Community Server - GPL

另外：也可在主机上访问docker主机上的mysql
docker exec -it mysql8 /bin/sh
> 登录mysql
mysql -u root -p
> 修改mysql8 用户密码sha2问题
ALTER USER 'root'@'%' IDENTIFIED BY 'meiyou' PASSWORD EXPIRE NEVER;
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password by 'meiyou';




ALTER USER 'mslave'@'192.168.40.%' IDENTIFIED BY 'meiyou' PASSWORD EXPIRE NEVER;
ALTER USER 'mslave'@'192.168.40.%' IDENTIFIED WITH mysql_native_password by 'meiyou';



flush privileges;
至此Doker中安装、调配使用MySQL 8.0完成。

6. 其他命令
	yum remove -y 安装包名		# 删除安装包
	systemctl start/stop docker		#开始/停止docker
	docker rmi 镜像名：tag or 镜像id		# 移除已经安装的镜像
	docker stop/start 容器服务别名  or 容器id		# 停止/启动/删除容器服务
	docker rm 容器服务别名  or 容器id	#移除容器
	docker inspect container_name | grep Mounts -A 20  #查看容器挂载情况


centos7安装jdk：
1. 下载jdk的rpm安装包
centos7下载jdk方式：要加一个--no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie;"参数
wget --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie;" https://download.oracle.com/otn-pub/java/jdk/14+36/076bab302c7b4508975440c56f6cc26a/jdk-14_linux-x64_bin.rpm
wget --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie;" https://download.oracle.com/otn/java/jdk/11.0.6+8/90eb79fb590d45c8971362673c5ab495/jdk-11.0.6_linux-x64_bin.rpm
2. sudo rpm -ivh jdk*    #默认将文件安装到/usr/java目录下
3. vim /etc/profile    #更改环境变量
export JAVA_HOME=/root/javautils/jdk-11.0.6
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin
4. source /etc/profile



/root/javautils/jdk-11.0.6




CentOS7清理yum缓存和释放内存方法

清理yum缓存
清理yum缓存使用yum clean 命令，yum clean 的参数有headers, packages, metadata, dbcache, plugins, expire-cache, rpmdb, all

yum clean headers  #清理/var/cache/yum的headers
yum clean packages #清理/var/cache/yum下的软件包
yum clean metadata
...
Linux释放内存
释放网页缓存(To free pagecache):

sync; echo 1 > /proc/sys/vm/drop_caches
释放目录项和索引(To free dentries and inodes):

sync; echo 2 > /proc/sys/vm/drop_caches
释放网页缓存，目录项和索引（To free pagecache, dentries and inodes）:

sync; echo 3 > /proc/sys/vm/drop_caches
下面是我实际的数据。

[root@localhost ~]# free -m    #查看内存
              total        used        free      shared  buff/cache   available
Mem:            481         224         120           1         136         202
Swap:          1023         283         740
[root@localhost ~]# sync; echo 3 > /proc/sys/vm/drop_caches
[root@localhost ~]# free -m    #从120到186，释放了66m的内存
              total        used        free      shared  buff/cache   available
Mem:            481         209         186           1          85         222
Swap:          1023         283         740




#用rpm命令处理软件#
rpm -i #安装
-v #显示过程
-h #hash加密
-e #卸载
-q #查看
-a #所有
-p #软件包
-ql #查看软件在系统中的安装文件路径
-qlp #查看未安装软件包在系统中如果安装后产生文件的路径
-qf #根据某个文件找出包含此文件的安装包
-qc #查看软件的配置文件名称
-qd #查看软件的帮助文件
–scripts #查看脚本
–nodeps #安装软件忽略依赖性
–force #强行安装软件
-Kv #检测软件包是否被篡改
卸载软件wps-office rpm -e wps-office
安装软件wps: rpm -ivh wps-office-10.1.0.5672-1.a21.x86_64.rpm
##软件包名称详解：
wps-office-10.1.0.5672-1.a21.x86_64.rpm
    【1】     【2】    【3】  【4】【5】
【1】 软件名称
【2】 版本
【3】 适用系统
【4】 架构
【5】 适用rpm体系软件
rehhat packages manager
#############################################################
解决所有软件的安装问题：rpm
但是它只告诉软件的依赖性，并不给解决
rpm -ivh
i:安装 ；v:显示 ；h:hash加密。
忽略软件依赖性，安装好了并不能直接用




同步服务器的时间
1.安装ntpdate工具
sudo yum -y install ntp ntpdate
2.设置系统时间与网络时间同步
sudo ntpdate cn.pool.ntp.org
3.将系统时间写入硬件时间
sudo hwclock --systohc




在配置之前，如果数据库已存在数据，请先进行备份
mysqldump -uroot -pmysql --all-databases --lock-all-tables > ~/master_db.sql

-u ：用户名
-p ：示密码
--all-databases ：导出所有数据库
--lock-all-tables ：执行操作时锁住所有表，防止操作时有数据修改
~/master_db.sql :导出的备份数据（sql文件）位置，可自己指定

2、主从配置
演示的环境如下：
名称
IP
msyql-master（主库）
192.168.40.123
mysql-slave（从库）
192.168.40.45/46/47

首先在这四台服务器安装mysql数据库
（1）配置主库
修改my.cnf文件，


[mysqld]
server-id = 1
log-bin = mysql-bin
binlog_format = ROW

修改好配置文件，重启mysql服务
service mysqld restart

创建从库同步数据的账号
mysql> create user 'mslave'@'192.168.40.%' identified by 'meiyou';
mysql> grant all privileges on *.* to 'mslave'@'192.168.40.%' with grant option;（grant 权限列表 on 数据库 to 用户名@访问主机）

#sha2问题
mysql> ALTER USER 'mslave'@'192.168.40.%' IDENTIFIED BY 'meiyou' PASSWORD EXPIRE NEVER;
mysql> ALTER USER 'mslave'@'192.168.40.%' IDENTIFIED WITH mysql_native_password by 'meiyou';

mysql> flush privileges;

192.168.50.% 表示该网段下的从服务器
*.* 为当前服务器所有库所有表
with grant option 为表示该用户可以将自己拥有的权限授权给别人
mslave 为可设置的新用户名
password 为可设置的密码
flush privileges 命令本质上的作用是将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里。MySQL用户数据和权限有修改后，希望在"不重启MySQL服务"的情况下直接生效，那么就需要执行这个命令。通常是在修改ROOT帐号的设置后，怕重启后无法再登录进来，那么直接flush之后就可以看权限设置是否生效。而不必冒太大风险。


注意：上面这两个命令是在mysql的终端执行的。

查看主库的状态：
mysql的终端执行:
show master status\G;

注意会在这里得到一个sql的执行文件，加入到从服务器的配置中

（2）配置从库
修改my.cnf文件，
[mysqld]
server-id = 2
log-bin = mysql-bin
binlog_format = ROW

修改好配置文件，重启mysql服务
service mysqld restart

执行同步命令
mysql的终端执行:
# 设置主服务器ip，同步账号密码，同步位置
change master to master_host='192.168.40.123',master_user='mslave',master_password='meiyou',master_log_file='mysql-bin.000005';

# 开启同步功能
start slave;

查看从库的状态
mysql的终端执行:
show slave status\G;

